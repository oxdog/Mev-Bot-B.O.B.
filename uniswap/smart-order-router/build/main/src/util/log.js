"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setGlobalLogger = exports.log = void 0;
class NullLogger {
    constructor() {
        this.ERROR_MESSAGE = 'NullLogger does not support. Instantiate a valid logger using "setGlobalLogger"';
        this.src = true;
    }
    addStream(_stream) {
        throw new Error(this.ERROR_MESSAGE);
    }
    addSerializers(_serializers) {
        throw new Error(this.ERROR_MESSAGE);
    }
    child(_options, _simple) {
        return this;
    }
    reopenFileStreams() {
        throw new Error(this.ERROR_MESSAGE);
    }
    level(_value) {
        return;
    }
    levels(_name, _value) {
        return;
    }
    trace(..._rest) {
        return true;
    }
    debug(..._rest) {
        return true;
    }
    info(..._rest) {
        return true;
    }
    warn(..._rest) {
        return true;
    }
    error(..._rest) {
        return true;
    }
    fatal(..._rest) {
        return true;
    }
    addListener(_event, _listener) {
        throw new Error(this.ERROR_MESSAGE);
    }
    on(_event, _listener) {
        throw new Error(this.ERROR_MESSAGE);
    }
    once(_event, _listener) {
        throw new Error(this.ERROR_MESSAGE);
    }
    removeListener(_event, _listener) {
        throw new Error(this.ERROR_MESSAGE);
    }
    off(_event, _listener) {
        throw new Error(this.ERROR_MESSAGE);
    }
    removeAllListeners(_event) {
        throw new Error(this.ERROR_MESSAGE);
    }
    setMaxListeners(_n) {
        throw new Error(this.ERROR_MESSAGE);
    }
    getMaxListeners() {
        throw new Error(this.ERROR_MESSAGE);
    }
    listeners(_event) {
        throw new Error(this.ERROR_MESSAGE);
    }
    rawListeners(_event) {
        throw new Error(this.ERROR_MESSAGE);
    }
    emit(_event, ..._args) {
        throw new Error(this.ERROR_MESSAGE);
    }
    listenerCount(_event) {
        throw new Error(this.ERROR_MESSAGE);
    }
    prependListener(_event, _listener) {
        throw new Error(this.ERROR_MESSAGE);
    }
    prependOnceListener(_event, _listener) {
        throw new Error(this.ERROR_MESSAGE);
    }
    eventNames() {
        throw new Error(this.ERROR_MESSAGE);
    }
}
exports.log = new NullLogger();
const setGlobalLogger = (_log) => {
    exports.log = _log;
};
exports.setGlobalLogger = setGlobalLogger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3V0aWwvbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLE1BQU0sVUFBVTtJQUFoQjtRQUNVLGtCQUFhLEdBQ25CLGlGQUFpRixDQUFDO1FBeUJwRixRQUFHLEdBQUcsSUFBSSxDQUFDO0lBb0diLENBQUM7SUE1SEMsU0FBUyxDQUFDLE9BQXNCO1FBQzlCLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFDRCxjQUFjLENBQUMsWUFBZ0M7UUFDN0MsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUNELEtBQUssQ0FBQyxRQUFnQixFQUFFLE9BQWlCO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNELGlCQUFpQjtRQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFHRCxLQUFLLENBQUMsTUFBWTtRQUNoQixPQUFPO0lBQ1QsQ0FBQztJQUlELE1BQU0sQ0FBQyxLQUFXLEVBQUUsTUFBWTtRQUM5QixPQUFPO0lBQ1QsQ0FBQztJQU9ELEtBQUssQ0FBQyxHQUFHLEtBQVU7UUFDakIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBS0QsS0FBSyxDQUFDLEdBQUcsS0FBVTtRQUNqQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFLRCxJQUFJLENBQUMsR0FBRyxLQUFVO1FBQ2hCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUtELElBQUksQ0FBQyxHQUFHLEtBQVU7UUFDaEIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBS0QsS0FBSyxDQUFDLEdBQUcsS0FBVTtRQUNqQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFLRCxLQUFLLENBQUMsR0FBRyxLQUFV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